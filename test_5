1)
#include <iostream>
#include <algorithm>
using namespace std;
int binary_search(int arr[], int left, int right, int key)
{
    int midd = 0;
    while (1)
    {
        midd = (left + right) / 2;
        if (key < arr[midd])
            right = midd - 1;
        else if (key > arr[midd])
            left = midd + 1;
        else
            return midd;
        if (left > right)
            return -1;
    }
}
int main() {
    system("chcp 65001");
    int n;
    cout << "Enter the size of the array:\n";
    cin >> n;
    int arr[n];
    cout << "Enter the numbers to fill in the array:\n";
    for (int i = 0; i < n; i++)
        cin >> arr[i];
    int key = 0;
    int index = 0;
    sort(arr, arr + n);
    cout << "Enter the key:\n";
    cin >> key;
    index = binary_search(arr, 0, n, key);
    if (index >= 0)
        cout << "An element in a cell with an index: " << index;
    else
        cout << "There is no such element in the array";
    return 0;
}

2)
#include <bits/stdc++.h>
using namespace std;
int find_terms(int arr[], int res, int k)
{
    unordered_map<int, int> m;
    for (int i = 0; i < res; i++)
        m[arr[i]]++;
    int twice_count = 0;
    for (int i = 0; i < res; i++)
    {
        twice_count += m[k-arr[i]];
        if (k - arr[i] == arr[i])
            twice_count--;
    }
    return twice_count/2;
}
int main()
{int n;
    cout << "Size array:\n";
    cin >> n;
    int arr[n];
    cout << "Array:\n";
    for (int i = 0; i < n; i++)
        cin >> arr[i];
    int k;
    cout << "Summ pairs:\n";
    cin >> k;
    int res = sizeof(arr)/sizeof(arr[0]);
    cout << "Count of pairs is "<< find_terms(arr, res, k);
    return 0;
}
